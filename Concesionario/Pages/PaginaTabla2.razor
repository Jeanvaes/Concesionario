@page "/pagina2tabla"
@using System.Net.Http.Json
@using Concesionario.Data
@inject HttpClient _client;

<MudText Typo="Typo.h5"><b>INSTRUCCIONES</b></MudText>
<MudText>Los botones que se observan tienen las siguientes funciones:</MudText>
<MudText><b>Agregar:</b> Agrega a la tabla un cliente</MudText>
<MudText><b>Eliminar:</b> Elimina los clientes agregados en orden de mas nuevo a mas viejo,</MudText>
    <MudText>o tiene la opcion de usar el icono de eliminar en cada fila.</MudText>


<MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="GenerarAgregar">Agregar</MudButton>
 
<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="GenerarEliminar">Eliminar</MudButton>

<MudDataGrid T="Cliente" Items="@Clientes" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
    StartedEditingItem="@StartedEditingItem" CancelledEditingItem="@CancelledEditingItem" CommittedItemChanges="@CommittedItemChanges"
    Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
    <Columns>
        <Column T="Cliente" Field="numero" Title="Nr" IsEditable="false" />
        <Column T="Cliente" Field="nombre" />
        <Column T="Cliente" Field="sueldo" />
        <Column T="Cliente" Field="numeroCarros" Title="Carros"/>
        <Column T="Cliente" Field="marcaPreferida" Title="Marca"/>
        
        <Column T="Cliente" Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Delete" OnClick="(args)=> EliminarEvento(context.Item)" />
            </CellTemplate>
        </Column>
    </Columns>
</MudDataGrid>



@code {
    [Inject] private ISnackbar SnackBarService { get; set; }
    //Boton

    Cliente elemento = new Cliente
        {
            numeroCarros = 5,
            sueldo = "1'000.000",
            nombre = "Jeanvaes",
            numero = 666,
            marcaPreferida = "Jaguar"
        };

    private async void GenerarAgregar()
    {
        SnackBarService.Add("Se agregó el Cliente", Severity.Success);
        
        ((List<Cliente>)Clientes).Add(elemento);
        StateHasChanged();
    }
    
        
    private async void GenerarEliminar()
    {
        SnackBarService.Add("Se eliminó el Cliente", Severity.Error);
        ((List<Cliente>)Clientes).Remove(elemento);
        StateHasChanged();
    }



    //Taabla
    private IEnumerable<Cliente> Clientes = new List<Cliente>();
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;

    protected override async Task OnInitializedAsync()
    {
        var elemento = new List<Cliente>();
        _client.BaseAddress = new Uri("https://localhost:7295/");
        var requestMessage = new HttpRequestMessage(HttpMethod.Get, "Cliente/ConsultarCliente");
        var respuesta = await _client.SendAsync(requestMessage);

        if(respuesta.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var responseBody = await respuesta.Content.ReadAsStringAsync();
            var listasCliente = System.Text.Json.JsonSerializer.Deserialize<List<Cliente>>(responseBody);
            Clientes = listasCliente;
        }
        
        

    }

    void EliminarEvento(Cliente item)
    {
        SnackBarService.Add("Se eliminó el Cliente", Severity.Error);
        ((List<Cliente>)Clientes).Remove(elemento);
        StateHasChanged();
    }

    // events
    void StartedEditingItem(Cliente item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CancelledEditingItem(Cliente item)
    {
        _events.Insert(0, $"Event = CancelledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
    //este servira para guardar o actualizar registros
    void CommittedItemChanges(Cliente item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
        SnackBarService.Add("Se editó el Cliente", Severity.Warning);
    }
}